name: Setup Spinnaker
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      namespace:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Spinnaker namespace'
        # Default value if no value is explicitly provided
        default: 'spinnaker1'
        # Input has to be provided for the workflow to run
        required: false
        # The data type of the input
        type: string
        
jobs:
  OpsMx-Spinnaker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v3



      - name: Create Secret
        env:
          ACCESS_TOKEN: ${{ secrets.GIT_TOKEN }}
          #ORG: ${{ inputs.organisation }}
          #SECRET_NAME: GIT_USERNAME  # Replace with the name you want for the secret
          #GITHUB_USERNAME: ${{inputs.gitusername}}
          #GITHUB_REPO: ${{ inputs.repository }}
          #LOCAL_FILE_PATH: "ninja-training-cluster.config"
        run: |

             # Base64 encode the content            
             GITORG_CONTENT=$(echo "yugaa22111" | base64 )
             GITREPO_CONTENT=$(echo "cve-target111" | base64 )
             GITUSERNAME_CONTENT=$(echo yugaa22111 | base64 )
             GITTOKEN_CONTENT=$(echo abcerossss | base64 )
             SPINVERSION_CONTENT=$(echo 1.30.1 | base64 )
             
              # Fetch the public key for the repository
              RESPONSE=$(curl -X GET -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${ACCESS_TOKEN}" "https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key")


              echo $RESPONSE
              
              # Extract the key_id and key from the response
              KEY_ID=$(echo "$RESPONSE" | jq -r '.key_id')
              #KEY=$(echo "$RESPONSE" | jq -r '.key')

              #curl -X PUT "https://api.github.com/repos/${{ github.repository }}/actions/secrets/version"   -H "Authorization: token ${ACCESS_TOKEN}"   -H "Accept: application/vnd.github.v3+json"   -d "{\"encrypted_value\": \"${SPINVERSION_CONTENT}\",\"key_id\": \"${KEY_ID}\"}"

              #curl -X PUT "https://api.github.com/repos/${{ github.repository }}/actions/secrets/organisation"   -H "Authorization: token ${ACCESS_TOKEN}"   -H "Accept: application/vnd.github.v3+json"   -d "{\"encrypted_value\": \"${GITORG_CONTENT}\",\"key_id\": \"${KEY_ID}\"}"

              #curl -X PUT "https://api.github.com/repos/${{ github.repository }}/actions/secrets/repository"   -H "Authorization: token ${ACCESS_TOKEN}"   -H "Accept: application/vnd.github.v3+json"   -d "{\"encrypted_value\": \"${GITREPO_CONTENT}\",\"key_id\": \"${KEY_ID}\"}"

              #curl -X PUT "https://api.github.com/repos/${{ github.repository }}/actions/secrets/GIT_USERNAME"   -H "Authorization: token ${ACCESS_TOKEN}"   -H "Accept: application/vnd.github.v3+json"   -d "{\"encrypted_value\": \"${GITUSERNAME_CONTENT}\",\"key_id\": \"${KEY_ID}\"}"

             # curl -X PUT "https://api.github.com/repos/${{ github.repository }}/actions/secrets/GIT_TOKEN"   -H "Authorization: token ${ACCESS_TOKEN}"   -H "Accept: application/vnd.github.v3+json"   -d "{\"encrypted_value\": \"${GITTOKEN_CONTENT}\",\"key_id\": \"${KEY_ID}\"}"
              
              curl -L -X PUT -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${ACCESS_TOKEN}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/orgs/yugaa22/igor-oes/actions/secrets/version  -d '{"encrypted_value": \"${SPINVERSION_CONTENT}\","key_id": \"${KEY_ID}\"}'




  
      - name: Display structure of downloaded files
        run: |
           ls -ltra 
           pwd
           
           kubectl get ns  --kubeconfig ninja-training-cluster.config


          
      - name: Setup OpsMx Helm chart and Install
        run: |
          export KUBECONFIG=ninja-training-cluster.config
          # kubectl create ns ${{ inputs.namespace}} 


             kubectl -n ${{ inputs.namespace}} create secret generic testing --from-literal=version=${{ secrets.version }}

          
           #kubectl -n ${{ inputs.namespace}} create secret generic opsmx-gitops-auth  --from-literal=gitcloneparam="https://${{ secrets.GIT_USERNAME }}:${{ secrets.GIT_TOKEN }}@github.com/${{ secrets.organisation }}/${{ secrets.repository }}.git" --from-literal=gituser=${{ secrets.GIT_USERNAME }} --from-literal=gittoken='${{ secrets.GIT_TOKEN }}'
         
           #kubectl -n ${{ inputs.namespace}} get secret  opsmx-gitops-auth -o yaml  | yq '.data.gitcloneparam' | base64 -d
